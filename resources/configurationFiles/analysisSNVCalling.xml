<configuration name='snvCallingAnalysis' description='SNV Calling for NGS data.'
               configurationType='analysis' class='de.dkfz.roddy.core.Analysis' workflowClass='de.dkfz.b080.co.snvpipeline.SNVCallingWorkflow'
               runtimeServiceClass='de.dkfz.b080.co.common.COProjectsRuntimeService'
               imports="commonCOWorkflowsSettings"
               canCreateTestdata='true'
               listOfUsedTools="snvCalling,snvJoinVcfFiles,snvAnnotation,snvDeepAnnotation,snvFilter"
               usedToolFolders="snvPipeline,tools"
               cleanupScript="cleanupScript">
    <configurationvalues>

        <cvalue name='RSCRIPT_VERSION' value='3.0.0' type="string"/>
        <cvalue name='PERL_VERSION' value='5.20.2' type="string"/>
        <cvalue name='SAMTOOLS_VERSION' value='0.1.19' type="string"/>
        <cvalue name='PYTHON_VERSION' value='2.7.9' type="string"/>
        <cvalue name='BEDTOOLS_VERSION' value='2.16.2' type="string"/>
        <cvalue name='HTSLIB_VERSION' value='0.2.5' type="string"/>
        <cvalue name='PYPY_VERSION' value='5.0.1' type="string"/>

        <cvalue name='workflowEnvironmentScript' value="workflowEnvironment_tbiLsf" type='string'/>

        <cvalue name='MPILEUP_OPTS' value='"-REI -q 30 -ug"' type="string"/>
        <cvalue name='BCFTOOLS_OPTS' value='"-vcgN -p 2.0"' type="string"/>
        <cvalue name='MPILEUPCONTROL_OPTS' value='"-ABRI -Q 0 -q 1"' type="string"/>
        <cvalue name='MPILEUPOUT_PREFIX' value='mp_' type="string"/>
        <cvalue name='INDELFILE_PREFIX' value='indel_' type="string"/>
        <!--<cvalue name='analysisMethodNameOnInput' value='whole_genome_analysis' type='string' />-->
        <cvalue name="RAW_SNV_FILTER_OPTIONS" value='" --minVac=3 --minVaf=0.03 --minVacPS=2"' type="string"/>
        <!--<cvalue name='REFERENCE_GENOME' value="${referenceGenome_hg19_chr}" type="string"/>-->

        <cvalue name="DBSNP" value="${hg19DatabasesDirectory}/dbSNP/dbSNP_141/00-All.SNV.vcf.gz" type="path"/>
        <cvalue name="DBSNP_COL" value="DBSNP" type="string"/>
        <cvalue name="KGENOME" value="${hg19DatabasesDirectory}/1000genomes/ALL.wgs.phase1_integrated_calls.20101123.snps_chr.vcf.gz" type="path"/>
        <cvalue name="KGENOMES_COL" value="1K_GENOMES" type="string"/>
        <cvalue name='ANNOVAR_BINARY' value='${sharedFilesBaseDirectory}/annovar/annovar_Nov2014/annotate_variation.pl' type='path'/>
        <cvalue name='ANNOVAR_BUILDVER' value='hg19' type='string'/>
        <cvalue name='ANNOVAR_DBPATH' value='${sharedFilesBaseDirectory}/annovar/annovar_Nov2014/humandb/' type='path'/>
        <cvalue name='ANNOVAR_DBTYPE' value="'-dbtype wgEncodeGencodeCompV19'" type='string'/>
        <cvalue name="ANNOVAR_GENEANNO_COLS" value='"ANNOVAR_FUNCTION,GENE,EXONIC_CLASSIFICATION,ANNOVAR_TRANSCRIPTS"' type="string"/>
        <cvalue name="ANNOVAR_SEGDUP_COL" value="SEGDUP" type="string"/>
        <cvalue name="ANNOVAR_CYTOBAND_COL" value="CYTOBAND" type="string"/>
        <cvalue name="GERMLINE_AVAILABLE" value="1" type="string"/>
        <cvalue name="CONFIDENCE_OPTS" value='"-t 500 -c 0 -p 0"' type="string"
                description="max read depth in control (-t INT default 150 for genomes, set to 500 for exomes) can now be ommited to avoid depth dependent punishing by setting -c 0. It is also possible to get a justification for the confidence score by setting the -p 1 flag"/>

        <cvalue name="MIN_CONFIDENCE_SCORE" value="8" type="integer"/>
        <cvalue name="SNV_FILTER_OPTIONS" value="--ncRNA=1 --synonymous=0" type="string" description="Values used for the extraction of SNVs"/>
        <cvalue name="MINCOV" value="0" type="integer" description="minimal coverage for somatic SNVs (MAF plot)"/>
        <cvalue name="ALLELE_FREQ" value="0" type="integer" description="ignore SNVs with MAF below that value (rainfall plot)"/>
        <cvalue name="CLINICALANNO" value='""' type="string" description="tab separated file with fields in the following order: ID, decoded PID, gender, age, subgroup"/>

        <!--### Bias filter parameters-->
        <!--## Thresholds to determine if a field is biased. A field is biased if (and only if) its p value is smaller then biasPVal. If that is the case the bias ratio determines if it is a weak bias (ratio smaller biasRatioThreshold) or a strong bias (ratio larger biasRatioThreshold)-->
        <cvalue name="biasPValThreshold" value="0.01" type="float"
                description=" probability threshold to accept bias. The p value gives the probability to observe the same or stronger bias by chance when assuming a binomial distribution with event probability of 0.5"/>
        <cvalue name="biasRatioMinimum" value="0.53" type="float" description=" minimum fraction of reads in direction of bias / total variant reads we require to call a field biased"/>
        <cvalue name="biasRatioThreshold" value="0.63" type="float" description="threshold for fraction of reads in direction of bias / total variant reads above which it will be considered a strong bias"/>
        <cvalue name="nReads" value="20" type="integer" description=" number of reads in one field above which a bias is possible"/>
        <cvalue name="nMuts" value="4" type="integer" description=" number of muts above which a bias is possible"/>

        <!--## Thresholds to determine if a variant call is an artifact-->
        <!--#max mumber of reads we will tolerate in the direction opposite to the bias for it to be called an artefact-->
        <cvalue name="maxNumOppositeReadsSequencingWeakBias" value="0" type="integer"/>
        <cvalue name="maxNumOppositeReadsSequenceWeakBias" value="0" type="integer"/>
        <cvalue name="maxNumOppositeReadsSequencingStrongBias" value="1" type="integer"/>
        <cvalue name="maxNumOppositeReadsSequenceStrongBias" value="1" type="integer"/>
        <cvalue name="rVcf" value="0.1" type="float" description="max fraction of reads (reads/total reads) we tolerate in the direction opposite to the bias for it to be called an artefact"/>


        <configurationValueBundle name='PIPE_CONFIG:SNV_RELIABILITY'>
            <cvalue name='MAPABILITY' value='${hg19DatabaseUCSCDirectory}/wgEncodeCrgMapabilityAlign100mer_chr.bedGraph.gz' type="path"/>
            <cvalue name='HISEQDEPTH' value='${hg19DatabaseUCSCDirectory}/HiSeqDepthTop10Pct_chr.bed.gz' type="path"/>
            <cvalue name='SIMPLE_TANDEMREPEATS' value='${hg19DatabaseUCSCDirectory}/repeats/SimpleTandemRepeats_chr.bed.gz:4' type="path"/>
            <cvalue name='REPEAT_MASKER' value='${hg19DatabaseUCSCDirectory}/Sept2013/UCSC_27Sept2013_RepeatMasker.bed.gz' type="path"/>
            <cvalue name='DUKE_EXCLUDED' value='${hg19DatabaseUCSCDirectory}/DukeExcluded_chr.bed.gz' type="path"/>
            <cvalue name='DAC_BLACKLIST' value='${hg19DatabaseUCSCDirectory}/DACBlacklist_chr.bed.gz' type="path"/>
            <cvalue name='SELFCHAIN' value='${hg19DatabaseUCSCDirectory}/selfChain_chr.bed.gz:4::--maxNrOfMatches=5' type="path"/>
        </configurationValueBundle>


        <!--### Deep annotation
            #<PIPE_CONFIG:SNV_DEEPANNOTATION
            # list of files to get deep annotation from (+ options)
            # up to 4 variables can be used, separated by :
            # before the = is the  name for the column in which the information will be reported
            # afterwards, the complete path to the sorted, headered, bgzipped and tabixed file
            # optional after the first ":" additional columns to include (default is the entry in the "name" column for bed)
            # optional after the second ":" report level for matches (default is 2)
            # optional after the third ":" additional options to pass through to annotate_vcf.pl
            # see also the usage report of ngs2/trunk/tools/annotate_vcf.pl
            # if any whitespaces are required, use quotation marks like in this example: #MAPABILITY="/ibios/co02/annotation/hg19/wgEncodeCrgMapabilityAlign100mer.bedGraph.gz:::-breakPointMode -aEndOffset=1"-->
        <configurationValueBundle name='PIPE_CONFIG:SNV_DEEPANNOTATION'>
            <cvalue name='CpGislands' value='${hg19DatabaseUCSCDirectory}/Sept2013/UCSC_27Sept2013_CpG_islands.bed.gz' type="path"/>
            <cvalue name='CgiMountains' value='${assembliesHG191000GenomesDirectory}/CustomDeepAnnotation/CgiMountains_chr.bed.gz:4' type="path"/>
            <cvalue name='Enhancers' value='${hg19DatabaseUCSCDirectory}/Enhancers_Vista_2011_01_14_chr.bed.gz' type="path"/>
            <cvalue name='miRNAs_snoRNAs' value='${hg19DatabasesDirectory}/miRNA/miRNA_snoRNAs_miRBaseRelease15_chr.bed.gz' type="path"/>
            <cvalue name='miRBase18' value='${hg19DatabasesDirectory}/miRNA/miRBase_version-18_chr.bed.gz' type="path"/>
            <cvalue name='miRNAtargets' value='${hg19DatabasesDirectory}/miRNA/miRNAsites_TargetScan_BartelLab_2011_01_14_chr.bed.gz' type="path"/>
            <cvalue name='phastConsElem20bp' value='${hg19DatabaseUCSCDirectory}/phastConsElem_min20bp_chr.bed.gz:4' type="path"/>
            <cvalue name='TFBScons' value='${hg19DatabaseUCSCDirectory}/tfbsConsSites_noncoding_merged_chr.bed.gz' type="path"/>
            <cvalue name='COSMIC' value='${hg19DatabasesDirectory}/COSMIC/Cosmic_v66_hg19_coding_SNVs.bed.gz:7,8,9:1' type="path"/>
            <cvalue name='ENCODE_DNASE' value='${hg19DatabaseUCSCDirectory}/Sept2013/UCSC_27Sept2013_DNase_cluster_V2.bed.gz' type="path"/>
            <cvalue name='ENCODE_TFBS' value='${hg19DatabaseUCSCDirectory}/Sept2013/UCSC_27Sept2013_wgEncodeRegTfbsClusteredV3.bed.gz' type="path"/>
        </configurationValueBundle>
        <!--#>PIPE_CONFIG-->

    </configurationvalues>
    <processingTools>
        <tool name='workflowEnvironment_tbiLsf' value="tbi-lsf-cluster.sh" basepath='snvPipeline/environments'/>
        <tool name="cleanupScript" value="cleanupScript.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="0.1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="l" memory="0.1" cores="1" nodes="1" walltime="1"/>
            </resourcesets>
        </tool>
        <tool name="snvCallingMetaScript" value="snvCallingMetaScript.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="l" memory="12" cores="12" nodes="1" walltime="8"/>
                <rset size="xl" memory="12" cores="12" nodes="1" walltime="16"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="TUMOR_BAMFILE_FULLPATH_BP"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="CONTROL_BAMFILE_FULLPATH_BP"/>
            <!--<input type="filegroup" typeof="de.dkfz.b080.co.files.VCFFileGroupForSNVs" scriptparameter="VCF_FOR_SNV_FILES" passas="array"/>-->
            <output type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_RAW"/>
        </tool>
        <tool name="snvCalling" value="snvCalling.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="0.5" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="s" memory="1" cores="1" nodes="1" walltime="1"/>
                <rset size="m" memory="1" cores="1" nodes="1" walltime="3"/>
                <rset size="l" memory="1" cores="1" nodes="1" walltime="24"/>
                <rset size="xl" memory="4" cores="1" nodes="1" walltime="48"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="TUMOR_BAMFILE_FULLPATH_BP"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="CONTROL_BAMFILE_FULLPATH_BP"/>
            <input type="string" setby="callingCode" scriptparameter="PARM_CHR_INDEX"/>
            <output type="tuple">
                <output type="file" typeof="de.dkfz.b080.co.files.VCFFileForSNVs" check="false" scriptparameter="FILENAME_VCF_SNVS"/>
                <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_VCF_SNVS_CHECKPOINT"/>
            </output>
        </tool>
        <tool name="snvJoinVcfFiles" value="joinSNVVCFFiles.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="s" memory="1" cores="1" nodes="1" walltime="4"/>
                <rset size="m" memory="1" cores="1" nodes="1" walltime="4"/>
                <rset size="l" memory="1" cores="1" nodes="1" walltime="4"/>
                <rset size="xl" memory="6" cores="1" nodes="1" walltime="4"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="TUMOR_BAMFILE_FULLPATH_BP"/>
            <input type="filegroup" typeof="de.dkfz.b080.co.files.VCFFileGroupForSNVs" scriptparameter="VCF_FOR_SNV_FILES" passas="array"/>
            <output type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_RAW"/>
        </tool>
        <tool name="snvAnnotation" value="snvAnnotation.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="s" memory="3" cores="2" nodes="1" walltime="4"/>
                <rset size="m" memory="3" cores="1" nodes="1" walltime="12"/>
                <rset size="l" memory="3" cores="2" nodes="1" walltime="120"/>
                <rset size="xl" memory="4" cores="2" nodes="1" walltime="180"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_IN"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="TUMOR_BAMFILE_FULLPATH_BP"/>
            <!-- TODO Think of other possibilities for passas, so i.e. passas="indexedParameters" -->
            <output type="filegroup" typeof="de.dkfz.b080.co.files.VCFFileWithCheckpointFile">
                <output type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_OUT"/>
                <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_CHECKPOINT"/>
            </output>
        </tool>
        <tool name="snvDeepAnnotation" value="vcf_pipeAnnotator.sh" basepath="tools">
            <resourcesets>
                <rset size="t" memory="1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="s" memory="1" cores="3" nodes="1" walltime="1"/>
                <rset size="m" memory="1" cores="3" nodes="1" walltime="2"/>
                <rset size="l" memory="1" cores="3" nodes="1" walltime="3"/>
                <rset size="xl" memory="4" cores="3" nodes="1" walltime="4"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.VCFFileWithCheckpointFile">
                <output type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_SNVS"/>
                <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_CHECKPOINT"/>
            </output>
        </tool>
        <tool name="snvFilter" value="filter_vcf.sh" basepath="snvPipeline">
            <resourcesets>
                <rset size="t" memory="1" cores="1" nodes="1" walltime="1" queue="devel"/>
                <rset size="s" memory="1" cores="1" nodes="1" walltime="1"/>
                <rset size="m" memory="1" cores="1" nodes="1" walltime="2"/>
                <rset size="l" memory="1" cores="1" nodes="1" walltime="3"/>
                <rset size="xl" memory="4" cores="1" nodes="1" walltime="4"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF"/>
            <input type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_RAW_VCF"/>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="TUMOR_BAMFILE_FULLPATH_BP"/>
            <input type="string" setby="callingCode" scriptparameter="SNVFILE_PREFIX"/>
            <output type="filegroup" typeof="de.dkfz.b080.co.files.VCFFileWithCheckpointFile">
                <output type="file" typeof="de.dkfz.b080.co.files.SNVAnnotationFile" scriptparameter="FILENAME_VCF_SNVS"/>
                <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_CHECKPOINT"/>
            </output>
        </tool>

        <!--Tools for the SNV Calling workflow. Those tools are not used by Roddy directly-->
        <tool name="headeredFileConcatenator" value="headeredFileConcatenator.pl" basepath="tools"/>
        <tool name="annotateVcfFile" value="annotate_vcf.pl" basepath="tools"/>
        <tool name="vcfToAnnovar" value="vcf_to_annovar.pl" basepath="tools"/>
        <tool name="convertNewcolsToVcf" value="newCols2vcf.pl" basepath="tools"/>
        <tool name="createpipes" value="createpipes.pl" basepath="tools"/>
        <tool name="confidenceAnnotationNoGermline" value="confidenceAnnotation_SNVsNoGermline.pl" basepath="snvPipeline"/>
        <tool name="confidenceReAnnotation" value="confidenceREAnnotation_SNVs.pl" basepath="snvPipeline"/>
        <tool name="filterPeOverlap" value="filter_PEoverlap.py" basepath="snvPipeline"/>
        <tool name="flagBias" value="filterVcfForBias.py" basepath="snvPipeline"/>
        <tool name="createErrorPlots" value="createErrorPlots.py" basepath="snvPipeline"/>
        <tool name="mpileupSplitter" value="mpileupOutputSplitter.pl" basepath="snvPipeline"/>
        <tool name="ambiguousStripper" value="vcfAmbiguousIndelStripper.pl" basepath="snvPipeline"/>
        <tool name="rawSnvFilter" value="rawSnvFilter.py" basepath="snvPipeline"/>
        <tool name="vcfPileupCompare" value="vcf_pileup_compare_allin1_basecount.pl" basepath="snvPipeline"/>
        <tool name="snvExtractor" value="snv_extractor_v1.pl" basepath="snvPipeline"/>
        <tool name="inDbSnpCounter" value="in_dbSNPcounter.pl" basepath="snvPipeline"/>
        <tool name="mutationDistance" value="mutationDistance.py" basepath="snvPipeline"/>
        <tool name="snvsPerChromPlot" value="snvsPerChromPlot.r" basepath="snvPipeline"/>
        <tool name="makeMafInput" value="makeMAFinput.pl" basepath="snvPipeline"/>
        <tool name="mafPlots" value="MAF_plots.r" basepath="snvPipeline"/>
        <tool name="snvContextFrequencies" value="SNV_context_frequencies.pl" basepath="snvPipeline"/>
        <tool name="snvSeqContext" value="SNVSeqContext.R" basepath="snvPipeline"/>
        <tool name="findConfColumn" value="findConfColumn.pl" basepath="snvPipeline"/>
        <tool name="purityReloaded" value="PurityReloaded.py" basepath="snvPipeline"/>
        <tool name="intermutationDistanceCoordColor" value="intermutationDistance_Coord_color.r" basepath="snvPipeline"/>
		<tool name="median" value="median.pl" basepath="snvPipeline"/>
        <tool name="seqContextAnnotator" value="seqContext_annotator.pl" basepath="tools"/>
        <tool name="processAnnovar" value="processAnnovarOutput.pl" basepath="tools"/>
        <tool name="newColsToVcf" value="newCols2vcf.pl" basepath="tools"/>

        <tool name="analyzeBamHeader" value="analyzeBamHeader.sh" basepath="tools"/>
    </processingTools>
    <filenames package='de.dkfz.b080.co.files' filestagesbase='de.dkfz.b080.co.files.COFileStage'>
        <!--<filename class='VCFFileForSNVs' derivedFrom="BamFile" pattern="${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvs_${pid}.${RODDY_JOBARRAYINDEX}.vcf" />-->
        <filename class='VCFFileForSNVs' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvs_${pid}.${jobParameter,name="PARM_CHR_INDEX"}.vcf'/>
        <filename class='TextFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/.snvs_${pid}.${jobParameter,name="PARM_CHR_INDEX"}.vcf_checkpoint'/>
        <filename class="TextFile" derivedFrom="SNVAnnotationFile" pattern='${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvCallingCheckPoint_${jobParameter,name="TOOL_ID"}'/>
        <!--<filename class="TextFile" onMethod="deepAnnotate" selectiontag="snvCallingCheckpoint" pattern='${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvCallingCheckPoint_${jobParameter,name="TOOL_ID"}' />-->
        <filename class='SNVAnnotationFile' derivedFrom="BamFile" pattern="${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvs_${pid}_raw.vcf.gz"/>
        <filename class='SNVAnnotationFile' derivedFrom="SNVAnnotationFile" pattern="${outputAnalysisBaseDirectory}/${mpileupOutputDirectory}/snvs_${pid}.vcf.gz"/>
    </filenames>
</configuration>
